# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/00_test_core.ipynb.

# %% auto 0
__all__ = ['TestCore']

# %% ../../nbs/00_test_core.ipynb 1
from ..core import *

# %% ../../nbs/01_core.ipynb 16
import unittest

class TestCore(unittest.TestCase):
    
    def test_repo_string(self):
        self.assertEqual(repo_string(), 'nbdev_hello_world')

    
    # test module

    def test_filename_for_test_module(self):
        self.assertEqual(filename_for_test_module('module', '04'), '04_test_module.ipynb')

    def test_default_exp_string_for_test_module(self):
        self.assertEqual(default_exp_string_for_test_module('module'), '#| default_exp tests/test_module')

    def test_import_module_string(self):
        self.assertEqual(import_module_string_for_test_module('repo', 'module'), 'from repo.module import *')
        # self.assertEqual(default_exp_string('module'), '#| default_exp tests/test_module')

    def test_format_test_module(self):
        fname = f"02_test_module.ipynb"

        format_test_module("module", "02")
        with self.assertRaises(Exception):
            with open(fname, 'r') as f:
                pass

    # module
    def test_filename(self):
        self.assertEqual(filename_for_module('module', '05'), '05_module.ipynb')

    def test_default_exp_string_for_module(self):
        self.assertEqual(default_exp_string_for_module('module'), "#| default_exp module")

    def test_default_test_class_string_for_module(self):
        self.assertEqual(default_test_class_string_for_module('module'), "TestModule")

    def test_format_module(self):
        fname = f"03_module.ipynb"

        format_module("module", "03")
        with self.assertRaises(Exception):
            with open(fname, 'r') as f:
                pass